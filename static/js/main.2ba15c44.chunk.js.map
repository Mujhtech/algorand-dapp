{"version":3,"sources":["contracts/property_contract_approval.teal","contracts/property_contract_clear.teal","utils/conversions.js","components/Cover.jsx","components/utils/Identicon.jsx","components/Wallet.jsx","components/property/AddProperty.jsx","components/property/Property.jsx","components/utils/Loader.jsx","components/utils/Notifications.jsx","components/property/Properties.jsx","App.js","reportWebVitals.js","index.js","utils/propertycontract.js","utils/constants.js"],"names":["base64ToUTF8String","base64String","Buffer","from","toString","utf8ToBase64String","utf8String","truncateAddress","address","slice","length","microAlgosToString","num","BigNumber","shiftedBy","ALGORAND_DECIMALS","toFixed","stringToMicroAlgos","str","toNumber","Cover","name","coverImg","connect","className","style","maxWidth","src","alt","Button","onClick","variant","Identicon","size","rest","width","height","diameter","seed","parseInt","Wallet","amount","symbol","disconnect","Dropdown","Toggle","align","id","Spinner","animation","Menu","Item","href","target","Stack","direction","gap","Divider","as","AddProperty","createProperty","useState","title","setTitle","image","setImage","location","setLocation","price","setPrice","isFormFilled","useCallback","show","setShow","handleClose","Modal","onHide","centered","Header","closeButton","Title","Form","Body","FloatingLabel","controlId","label","Control","type","onChange","e","value","placeholder","Footer","disabled","Property","property","buyProperty","deleteProperty","rateProperty","bought","appId","owner","rate","setRate","Col","Card","Badge","bg","objectFit","Text","min","max","readOnly","buyer","Number","Loader","role","Notification","position","autoClose","hideProgressBar","newestOnTop","closeOnClick","rtl","pauseOnFocusLoss","draggable","pauseOnHover","NotificationSuccess","text","NotificationError","DefaultProps","defaultProps","Properties","fetchBalance","properties","setProperties","loading","setLoading","getProperties","toast","getPropertiesAction","then","products","catch","error","console","log","finally","_","useEffect","data","createPropertyAction","buyPropertyAction","ratePropertyAction","deletePropertyAction","Row","xs","sm","lg","map","index","App","setAddress","setName","balance","setBalance","accountAddress","indexerClient","lookupAccountByID","do","response","_balance","account","connectWallet","myAlgoConnect","accounts","_account","Container","fluid","Nav","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById","this","compileProgram","programSource","encoder","TextEncoder","programBytes","encode","algodClient","compile","compileResponse","Uint8Array","result","senderAddress","getTransactionParams","params","approvalProgram","compiledApprovalProgram","clearProgram","compiledClearProgram","note","propertyDappNote","algosdk","encodeUint64","appArgs","txn","makeApplicationCreateTxnFromObject","suggestedParams","onComplete","OnApplicationComplete","NoOpOC","numLocalInts","numLocalByteSlices","numLocalBytes","numGlobalInts","numGlobalByteSlices","numGlobalBytes","txId","txID","signTransaction","toByte","signedTxn","sendRawTransaction","blob","waitForConfirmation","confirmedTxn","pendingTransactionInformation","transactionResponse","product","buyArg","appCallTxn","makeApplicationCallTxnFromObject","appIndex","paymentTxn","makePaymentTxnWithSuggestedParamsFromObject","to","txnArray","groupID","computeGroupID","i","group","tx","rateArg","ratesArg","makeApplicationDeleteTxnFromObject","apid","encodedNote","searchForTransactions","notePrefix","txType","minRound","transactionInfo","transactions","transaction","getApplication","push","lookupApplications","includeAll","application","deleted","globalState","creator","getField","fieldName","find","state","key","undefined","field","bytes","uint","config","Algodv2","Indexer","MyAlgoConnect"],"mappings":"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","file":"static/js/main.2ba15c44.chunk.js","sourcesContent":["export default \"#pragma version 6\\ntxn ApplicationID\\nint 0\\n==\\nbnz main_l8\\ntxn OnCompletion\\nint DeleteApplication\\n==\\nbnz main_l7\\ntxna ApplicationArgs 0\\nbyte \\\"buy\\\"\\n==\\nbnz main_l6\\ntxna ApplicationArgs 0\\nbyte \\\"rate\\\"\\n==\\nbnz main_l5\\nerr\\nmain_l5:\\nbyte \\\"RATE\\\"\\ntxna ApplicationArgs 1\\nbtoi\\napp_global_put\\nint 1\\nreturn\\nmain_l6:\\nbyte \\\"BOUGHT\\\"\\nint 1\\napp_global_put\\nbyte \\\"BUYER\\\"\\ntxna ApplicationArgs 1\\napp_global_put\\nint 1\\nreturn\\nmain_l7:\\ntxn Sender\\nglobal CreatorAddress\\n==\\nreturn\\nmain_l8:\\ntxn NumAppArgs\\nint 5\\n==\\nassert\\ntxn Note\\nbyte \\\"property-dapp:uv2\\\"\\n==\\nassert\\nbyte \\\"TITLE\\\"\\ntxna ApplicationArgs 0\\napp_global_put\\nbyte \\\"IMAGE\\\"\\ntxna ApplicationArgs 1\\napp_global_put\\nbyte \\\"LOCATION\\\"\\ntxna ApplicationArgs 2\\napp_global_put\\nbyte \\\"BOUGHT\\\"\\nint 0\\napp_global_put\\nbyte \\\"RATE\\\"\\nint 0\\napp_global_put\\nbyte \\\"OWNER\\\"\\ntxna ApplicationArgs 3\\napp_global_put\\nbyte \\\"BUYER\\\"\\ntxna ApplicationArgs 3\\napp_global_put\\nbyte \\\"PRICE\\\"\\ntxna ApplicationArgs 4\\nbtoi\\napp_global_put\\nint 1\\nreturn\";","export default \"#pragma version 6\\nint 1\\nreturn\";","import {ALGORAND_DECIMALS} from \"./constants\";\nimport BigNumber from \"bignumber.js\";\n\nexport const base64ToUTF8String = (base64String) => {\n    return Buffer.from(base64String, 'base64').toString(\"utf-8\")\n}\n\nexport const utf8ToBase64String = (utf8String) => {\n    return Buffer.from(utf8String, 'utf8').toString('base64')\n}\n\n// Truncate is done in the middle to allow for checking of first and last chars simply to ensure correct address\nexport const truncateAddress = (address) => {\n    if (!address) return\n    return address.slice(0, 5) + \"...\" + address.slice(address.length - 5, address.length);\n}\n\n// Amounts in microAlgos (e.g. 10500) are shown as algos (e.g. 10.5) in the frontend\nexport const microAlgosToString = (num) => {\n    if (!num) return\n    let bigNumber = new BigNumber(num)\n    return bigNumber.shiftedBy(-ALGORAND_DECIMALS).toFixed(3);\n}\n\n// Convert an amount entered as algos (e.g. 10.5) to microAlgos (e.g. 10500)\nexport const stringToMicroAlgos = (str) => {\n    if (!str) return\n    let bigNumber = new BigNumber(str)\n    return bigNumber.shiftedBy(ALGORAND_DECIMALS).toNumber();\n}","import React from 'react';\nimport {Button} from \"react-bootstrap\";\nimport PropTypes from 'prop-types';\n\nconst Cover = ({name, coverImg, connect}) => {\n    return (\n        <div className=\"d-flex justify-content-center flex-column text-center bg-black min-vh-100\">\n            <div className=\"mt-auto text-light mb-5\">\n                <div\n                    className=\" ratio ratio-1x1 mx-auto mb-2\"\n                    style={{maxWidth: \"320px\"}}\n                >\n                    <img src={coverImg} alt=\"\"/>\n                </div>\n                <h1>{name}</h1>\n                <p>Please connect your wallet to continue.</p>\n                <Button\n                    onClick={() => connect()}\n                    variant=\"outline-light\"\n                    className=\"rounded-pill px-3 mt-3\"\n                >\n                    Connect Wallet\n                </Button>\n            </div>\n            <p className=\"mt-auto text-secondary\">Powered by Algorand</p>\n        </div>\n    );\n};\n\nCover.propTypes = {\n    name: PropTypes.string,\n    coverImg: PropTypes.string,\n    connect: PropTypes.func\n};\n\nexport default Cover;\n","import Jazzicon from \"react-jazzicon\";\nimport PropTypes from \"prop-types\";\n\nconst Identicon = ({size, address, ...rest}) => (\n    <div {...rest} style={{width: `${size}px`, height: `${size}px`}}>\n        <Jazzicon diameter={size} seed={parseInt(address.slice(2, 10), 16)}/>\n    </div>\n);\n\nIdenticon.propTypes = {\n    size: PropTypes.number.isRequired,\n    address: PropTypes.string.isRequired\n};\n\nexport default Identicon;","import React from 'react';\nimport {Dropdown, Spinner, Stack} from 'react-bootstrap';\nimport {microAlgosToString, truncateAddress} from '../utils/conversions';\nimport Identicon from './utils/Identicon'\nimport PropTypes from \"prop-types\";\n\nconst Wallet = ({address, name, amount, symbol, disconnect}) => {\n    if (!address) {\n        return null;\n    }\n    return (\n        <>\n            <Dropdown>\n                <Dropdown.Toggle variant=\"light\" align=\"end\" id=\"dropdown-basic\"\n                                 className=\"d-flex align-items-center border rounded-pill py-1\">\n                    {amount ? (\n                        <>\n                            {microAlgosToString(amount)}\n                            <span className=\"ms-1\"> {symbol}</span>\n                        </>\n                    ) : (\n                        <Spinner animation=\"border\" size=\"sm\" className=\"opacity-25\"/>\n                    )}\n                    <Identicon address={address} size={28} className=\"ms-2 me-1\"/>\n                </Dropdown.Toggle>\n\n                <Dropdown.Menu className=\"shadow-lg border-0\">\n                    <Dropdown.Item href={`https://testnet.algoexplorer.io/address/${address}`}\n                                   target=\"_blank\">\n                        <Stack direction=\"horizontal\" gap={2}>\n                            <i className=\"bi bi-person-circle fs-4\"/>\n                            <div className=\"d-flex flex-column\">\n                                {name && (<span className=\"font-monospace\">{name}</span>)}\n                                <span className=\"font-monospace\">{truncateAddress(address)}</span>\n                            </div>\n                        </Stack>\n                    </Dropdown.Item>\n                    <Dropdown.Divider/>\n                    <Dropdown.Item as=\"button\" className=\"d-flex align-items-center\" onClick={() => {\n                        disconnect();\n                    }}>\n                        <i className=\"bi bi-box-arrow-right me-2 fs-4\"/>\n                        Disconnect\n                    </Dropdown.Item>\n                </Dropdown.Menu>\n            </Dropdown>\n        </>\n    )\n};\n\nWallet.propTypes = {\n    address: PropTypes.string,\n    name: PropTypes.string,\n    amount: PropTypes.number,\n    symbol: PropTypes.string,\n    disconnect: PropTypes.func\n};\n\nexport default Wallet;\n","import React, { useCallback, useState } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { Button, FloatingLabel, Form, Modal } from \"react-bootstrap\";\nimport { stringToMicroAlgos } from \"../../utils/conversions\";\n\nconst AddProperty = ({ createProperty }) => {\n  const [title, setTitle] = useState(\"\");\n  const [image, setImage] = useState(\"\");\n  const [location, setLocation] = useState(\"\");\n  const [price, setPrice] = useState(0);\n\n  const isFormFilled = useCallback(() => {\n    return title && image && location && price > 0;\n  }, [title, image, location, price]);\n\n  const [show, setShow] = useState(false);\n\n  const handleClose = () => setShow(false);\n  const handleShow = () => setShow(true);\n\n  return (\n    <>\n      <Button\n        onClick={handleShow}\n        variant=\"dark\"\n        className=\"rounded-pill px-0\"\n        style={{ width: \"38px\" }}\n      >\n        <i className=\"bi bi-plus\"></i>\n      </Button>\n      <Modal show={show} onHide={handleClose} centered>\n        <Modal.Header closeButton>\n          <Modal.Title>New Property</Modal.Title>\n        </Modal.Header>\n        <Form>\n          <Modal.Body>\n            <FloatingLabel\n              controlId=\"inputName\"\n              label=\"Property title\"\n              className=\"mb-3\"\n            >\n              <Form.Control\n                type=\"text\"\n                onChange={(e) => {\n                  setTitle(e.target.value);\n                }}\n                placeholder=\"Enter property title\"\n              />\n            </FloatingLabel>\n            <FloatingLabel\n              controlId=\"inputUrl\"\n              label=\"Image URL\"\n              className=\"mb-3\"\n            >\n              <Form.Control\n                type=\"text\"\n                placeholder=\"Image URL\"\n                value={image}\n                onChange={(e) => {\n                  setImage(e.target.value);\n                }}\n              />\n            </FloatingLabel>\n            <FloatingLabel\n              controlId=\"inputLocation\"\n              label=\"Location\"\n              className=\"mb-3\"\n            >\n              <Form.Control\n                type=\"text\"\n                placeholder=\"Location\"\n                onChange={(e) => {\n                  setLocation(e.target.value);\n                }}\n              />\n            </FloatingLabel>\n            <FloatingLabel\n              controlId=\"inputPrice\"\n              label=\"Price in ALGO\"\n              className=\"mb-3\"\n            >\n              <Form.Control\n                type=\"text\"\n                placeholder=\"Price\"\n                onChange={(e) => {\n                  setPrice(stringToMicroAlgos(e.target.value));\n                }}\n              />\n            </FloatingLabel>\n          </Modal.Body>\n        </Form>\n        <Modal.Footer>\n          <Button variant=\"outline-secondary\" onClick={handleClose}>\n            Close\n          </Button>\n          <Button\n            variant=\"dark\"\n            disabled={!isFormFilled()}\n            onClick={() => {\n              createProperty({\n                title,\n                image,\n                location,\n                price,\n              });\n              handleClose();\n            }}\n          >\n            Save propery\n          </Button>\n        </Modal.Footer>\n      </Modal>\n    </>\n  );\n};\n\nAddProperty.propTypes = {\n  createProperty: PropTypes.func.isRequired,\n};\n\nexport default AddProperty;\n","import React, { useState } from \"react\";\nimport PropTypes from \"prop-types\";\nimport {\n  Badge,\n  Button,\n  Card,\n  Col,\n  Form,\n  Stack,\n  FloatingLabel,\n} from \"react-bootstrap\";\nimport { microAlgosToString, truncateAddress } from \"../../utils/conversions\";\nimport Identicon from \"../utils/Identicon\";\n\nconst Property = ({\n  address,\n  property,\n  buyProperty,\n  deleteProperty,\n  rateProperty,\n}) => {\n  const { title, image, location, price, bought, appId, owner } = property;\n\n  const [rate, setRate] = useState(property.rate);\n\n  const ratedIcon = () => {\n    if (property.rate > 5) {\n      return \"bi bi-star-fill\";\n    } else if (property.rate > 0) {\n      return \"bi bi-star-half\";\n    } else {\n      return \"bi bi-star\";\n    }\n  };\n\n  return (\n    <Col key={appId}>\n      <Card className=\"h-100\">\n        <Card.Header>\n          <Stack direction=\"horizontal\" gap={2}>\n            <span className=\"font-monospace text-secondary\">\n              {truncateAddress(owner)}\n            </span>\n            <Identicon size={28} address={owner} />\n            <Badge\n              bg={bought === 1 ? \"success\" : \"secondary\"}\n              className=\"ms-auto\"\n            >\n              {bought === 1 ? \"Bought\" : \"Available\"}\n            </Badge>\n          </Stack>\n        </Card.Header>\n        <div className=\"ratio ratio-4x3\">\n          <img src={image} alt={title} style={{ objectFit: \"cover\" }} />\n        </div>\n        <Card.Body className=\"d-flex flex-column text-center\">\n          <Card.Title>{title}</Card.Title>\n          <Card.Text className=\"flex-grow-1\">{location}</Card.Text>\n          <Form className=\"d-flex align-content-stretch flex-row gap-2\">\n            <Button\n              variant={bought === 1 ? \"outline-success\" : \"outline-dark\"}\n              onClick={() => buyProperty(property)}\n              className={bought === 1 ? \"w-75 py-3\" : \"btn w-75 py-3\"}\n              disabled={bought === 1}\n            >\n              {bought === 1\n                ? \"Bought\"\n                : `Buy for ${microAlgosToString(price)} ALGO`}\n            </Button>\n            {property.owner === address && bought !== 1 && (\n              <Button\n                variant=\"outline-danger\"\n                onClick={() => deleteProperty(property)}\n                className=\"btn\"\n              >\n                <i className=\"bi bi-trash\"></i>\n              </Button>\n            )}\n            {bought === 1 && (\n              <>\n                <FloatingLabel\n                  controlId=\"inputCount\"\n                  label={property.rate > 0 ? \"Rated\" : \"Rate\"}\n                  className=\"w-25\"\n                >\n                  <Form.Control\n                    type=\"number\"\n                    value={rate}\n                    min=\"1\"\n                    max=\"10\"\n                    readOnly={property.rate > 0 || property.buyer !== address}\n                    onChange={(e) => {\n                      setRate(Number(e.target.value));\n                    }}\n                  />\n                </FloatingLabel>\n                <Button\n                  variant=\"outline-secondary\"\n                  onClick={() => rateProperty(property, rate)}\n                  disabled={property.rate > 0 || property.buyer !== address}\n                >\n                  <i className={ratedIcon()}></i>\n                </Button>\n              </>\n            )}\n          </Form>\n        </Card.Body>\n      </Card>\n    </Col>\n  );\n};\n\nProperty.propTypes = {\n  address: PropTypes.string.isRequired,\n  property: PropTypes.instanceOf(Object).isRequired,\n  buyProperty: PropTypes.func.isRequired,\n  deleteProperty: PropTypes.func.isRequired,\n  rateProperty: PropTypes.func.isRequired,\n};\n\nexport default Property;\n","import React from \"react\";\nimport {Spinner} from \"react-bootstrap\";\n\nconst Loader = () => (\n    <div className=\"d-flex justify-content-center\">\n        <Spinner animation=\"border\" role=\"status\" className=\"opacity-25\">\n            <span className=\"visually-hidden\">Loading...</span>\n        </Spinner>\n    </div>\n);\n\nexport default Loader;\n","import React from \"react\";\nimport {ToastContainer} from \"react-toastify\";\nimport PropTypes from \"prop-types\";\n\nconst Notification = () => (\n    <ToastContainer\n        position=\"bottom-center\"\n        autoClose={5000}\n        hideProgressBar\n        newestOnTop\n        closeOnClick\n        rtl={false}\n        pauseOnFocusLoss\n        draggable={false}\n        pauseOnHover\n    />\n);\n\nconst NotificationSuccess = ({text}) => (\n    <div>\n        <i className=\"bi bi-check-circle-fill text-success mx-2\"/>\n        <span className=\"text-secondary mx-1\">{text}</span>\n    </div>\n);\n\nconst NotificationError = ({text}) => (\n    <div>\n        <i className=\"bi bi-x-circle-fill text-danger mx-2\"/>\n        <span className=\"text-secondary mx-1\">{text}</span>\n    </div>\n);\n\nconst Props = {\n    text: PropTypes.string,\n};\n\nconst DefaultProps = {\n    text: \"\",\n};\n\nNotificationSuccess.propTypes = Props;\nNotificationSuccess.defaultProps = DefaultProps;\n\nNotificationError.propTypes = Props;\nNotificationError.defaultProps = DefaultProps;\n\nexport {Notification, NotificationSuccess, NotificationError};\n","import React, { useEffect, useState } from \"react\";\nimport { toast } from \"react-toastify\";\nimport AddProperty from \"./AddProperty\";\nimport Property from \"./Property\";\nimport Loader from \"../utils/Loader\";\nimport { NotificationError, NotificationSuccess } from \"../utils/Notifications\";\nimport PropTypes from \"prop-types\";\nimport { Row } from \"react-bootstrap\";\nimport {\n  createPropertyAction,\n  getPropertiesAction,\n  deletePropertyAction,\n  buyPropertyAction,\n  ratePropertyAction,\n} from \"../../utils/propertycontract\";\n\nconst Properties = ({ address, fetchBalance }) => {\n  const [properties, setProperties] = useState([]);\n  const [loading, setLoading] = useState(false);\n\n  const getProperties = async () => {\n    setLoading(true);\n    toast(<NotificationSuccess text=\"Fetching properties\" />);\n    getPropertiesAction()\n      .then((products) => {\n        if (products) {\n          setProperties(products);\n        }\n      })\n      .catch((error) => {\n        console.log(error);\n      })\n      .finally((_) => {\n        setLoading(false);\n      });\n  };\n\n  useEffect(() => {\n    getProperties();\n  }, []);\n\n  const createProperty = async (data) => {\n    setLoading(true);\n    createPropertyAction(address, data)\n      .then(() => {\n        toast(<NotificationSuccess text=\"Propery added successfully.\" />);\n        getProperties();\n        fetchBalance(address);\n      })\n      .catch((error) => {\n        console.log(error);\n        toast(<NotificationError text=\"Failed to create a product.\" />);\n        setLoading(false);\n      });\n  };\n\n  const buyProperty = async (property) => {\n    setLoading(true);\n    buyPropertyAction(address, property)\n      .then(() => {\n        toast(<NotificationSuccess text=\"Property bought successfully\" />);\n        getProperties();\n        fetchBalance(address);\n      })\n      .catch((error) => {\n        console.log(error);\n        toast(<NotificationError text=\"Failed to purchase property.\" />);\n        setLoading(false);\n      });\n  };\n\n  const rateProperty = async (property, rate) => {\n    setLoading(true);\n    ratePropertyAction(address, property, rate)\n      .then(() => {\n        toast(<NotificationSuccess text=\"Property rated successfully\" />);\n        getProperties();\n        fetchBalance(address);\n      })\n      .catch((error) => {\n        console.log(error);\n        toast(<NotificationError text=\"Failed to rate property.\" />);\n        setLoading(false);\n      });\n  };\n\n  const deleteProperty = async (property) => {\n    setLoading(true);\n    deletePropertyAction(address, property.appId)\n      .then(() => {\n        toast(<NotificationSuccess text=\"Property deleted successfully\" />);\n        getProperties();\n        fetchBalance(address);\n      })\n      .catch((error) => {\n        console.log(error);\n        toast(<NotificationError text=\"Failed to delete property.\" />);\n        setLoading(false);\n      });\n  };\n\n  if (loading) {\n    return <Loader />;\n  }\n  return (\n    <>\n      <div className=\"d-flex justify-content-between align-items-center mb-4\">\n        <h1 className=\"fs-4 fw-bold mb-0\">Properties</h1>\n        <AddProperty createProperty={createProperty} />\n      </div>\n      <Row xs={1} sm={2} lg={3} className=\"g-3 mb-5 g-xl-4 g-xxl-5\">\n        <>\n          {properties.map((data, index) => (\n            <Property\n              address={address}\n              property={data}\n              buyProperty={buyProperty}\n              deleteProperty={deleteProperty}\n              rateProperty={rateProperty}\n              key={index}\n            />\n          ))}\n        </>\n      </Row>\n    </>\n  );\n};\n\nProperties.propTypes = {\n  address: PropTypes.string.isRequired,\n  fetchBalance: PropTypes.func.isRequired,\n};\n\nexport default Properties;\n","import React, { useState } from \"react\";\nimport Cover from \"./components/Cover\";\nimport \"./App.css\";\nimport Wallet from \"./components/Wallet\";\nimport { Container, Nav } from \"react-bootstrap\";\nimport Properties from \"./components/property/Properties\";\nimport { indexerClient, myAlgoConnect } from \"./utils/constants\";\nimport { Notification } from \"./components/utils/Notifications\";\n\nconst App = function AppWrapper() {\n  const [address, setAddress] = useState(null);\n  const [name, setName] = useState(null);\n  const [balance, setBalance] = useState(0);\n\n  const fetchBalance = async (accountAddress) => {\n    indexerClient\n      .lookupAccountByID(accountAddress)\n      .do()\n      .then((response) => {\n        const _balance = response.account.amount;\n        setBalance(_balance);\n      })\n      .catch((error) => {\n        console.log(error);\n      });\n  };\n\n  const connectWallet = async () => {\n    myAlgoConnect\n      .connect()\n      .then((accounts) => {\n        const _account = accounts[0];\n        setAddress(_account.address);\n        setName(_account.name);\n        fetchBalance(_account.address);\n      })\n      .catch((error) => {\n        console.log(\"Could not connect to MyAlgo wallet\");\n        console.error(error);\n      });\n  };\n\n  const disconnect = () => {\n    setAddress(null);\n    setName(null);\n    setBalance(null);\n  };\n\n  return (\n    <>\n      <Notification />\n      {address ? (\n        <Container fluid=\"md\">\n          <Nav className=\"justify-content-end pt-3 pb-5\">\n            <Nav.Item>\n              <Wallet\n                address={address}\n                name={name}\n                amount={balance}\n                disconnect={disconnect}\n                symbol={\"ALGO\"}\n              />\n            </Nav.Item>\n          </Nav>\n          <main>\n            <Properties address={address} fetchBalance={fetchBalance} />\n          </main>\n        </Container>\n      ) : (\n        <Cover\n          name={\"Housing Property Dapp\"}\n          coverImg={\n            \"https://209859-635214-1-raikfcquaxqncofqfm.stackpathdns.com/wp-content/uploads/2018/09/affordable_housing-1024x562.jpg\"\n          }\n          connect={connectWallet}\n        />\n      )}\n    </>\n  );\n};\n\nexport default App;\n","const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({\n      getCLS, getFID, getFCP, getLCP, getTTFB,\n    }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport 'bootstrap-icons/font/bootstrap-icons.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport \"react-toastify/dist/ReactToastify.min.css\";\n\nReactDOM.render(\n    <React.StrictMode>\n        <App/>\n    </React.StrictMode>,\n    document.getElementById('root'),\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","import algosdk from \"algosdk\";\nimport {\n  algodClient,\n  indexerClient,\n  minRound,\n  myAlgoConnect,\n  numGlobalBytes,\n  numGlobalInts,\n  numLocalBytes,\n  numLocalInts,\n  propertyDappNote,\n} from \"./constants\";\n/* eslint import/no-webpack-loader-syntax: off */\nimport approvalProgram from \"!!raw-loader!../contracts/property_contract_approval.teal\";\nimport clearProgram from \"!!raw-loader!../contracts/property_contract_clear.teal\";\nimport { base64ToUTF8String, utf8ToBase64String } from \"./conversions\";\n\nclass Property {\n  constructor(\n    title,\n    image,\n    location,\n    price,\n    bought,\n    rate,\n    buyer,\n    appId,\n    owner\n  ) {\n    this.title = title;\n    this.image = image;\n    this.location = location;\n    this.price = price;\n    this.bought = bought;\n    this.rate = rate;\n    this.buyer = buyer;\n    this.appId = appId;\n    this.owner = owner;\n  }\n}\n\n// Compile smart contract in .teal format to program\nconst compileProgram = async (programSource) => {\n  let encoder = new TextEncoder();\n  let programBytes = encoder.encode(programSource);\n  let compileResponse = await algodClient.compile(programBytes).do();\n  return new Uint8Array(Buffer.from(compileResponse.result, \"base64\"));\n};\n\n// CREATE PRODUCT: ApplicationCreateTxn\nexport const createPropertyAction = async (senderAddress, property) => {\n  console.log(\"Adding property...\");\n\n  let params = await algodClient.getTransactionParams().do();\n\n  // Compile programs\n  const compiledApprovalProgram = await compileProgram(approvalProgram);\n  const compiledClearProgram = await compileProgram(clearProgram);\n\n  // Build note to identify transaction later and required app args as Uint8Arrays\n  let note = new TextEncoder().encode(propertyDappNote);\n  let title = new TextEncoder().encode(property.title);\n  let image = new TextEncoder().encode(property.image);\n  let location = new TextEncoder().encode(property.location);\n  let price = algosdk.encodeUint64(property.price);\n  let owner = new TextEncoder().encode(senderAddress);\n\n  let appArgs = [title, image, location, owner, price];\n\n  // Create ApplicationCreateTxn\n  let txn = algosdk.makeApplicationCreateTxnFromObject({\n    from: senderAddress,\n    suggestedParams: params,\n    onComplete: algosdk.OnApplicationComplete.NoOpOC,\n    approvalProgram: compiledApprovalProgram,\n    clearProgram: compiledClearProgram,\n    numLocalInts: numLocalInts,\n    numLocalByteSlices: numLocalBytes,\n    numGlobalInts: numGlobalInts,\n    numGlobalByteSlices: numGlobalBytes,\n    note: note,\n    appArgs: appArgs,\n  });\n\n  // Get transaction ID\n  let txId = txn.txID().toString();\n\n  // Sign & submit the transaction\n  let signedTxn = await myAlgoConnect.signTransaction(txn.toByte());\n  console.log(\"Signed transaction with txID: %s\", txId);\n  await algodClient.sendRawTransaction(signedTxn.blob).do();\n\n  // Wait for transaction to be confirmed\n  let confirmedTxn = await algosdk.waitForConfirmation(algodClient, txId, 4);\n\n  // Get the completed Transaction\n  console.log(\n    \"Transaction \" +\n      txId +\n      \" confirmed in round \" +\n      confirmedTxn[\"confirmed-round\"]\n  );\n\n  // Get created application id and notify about completion\n  let transactionResponse = await algodClient\n    .pendingTransactionInformation(txId)\n    .do();\n  let appId = transactionResponse[\"application-index\"];\n  console.log(\"Created new app-id: \", appId);\n  return appId;\n};\n\n// BUY PRODUCT: Group transaction consisting of ApplicationCallTxn and PaymentTxn\nexport const buyPropertyAction = async (senderAddress, product) => {\n  console.log(\"Buying property...\");\n\n  let params = await algodClient.getTransactionParams().do();\n\n  // Build required app args as Uint8Array\n  let buyArg = new TextEncoder().encode(\"buy\");\n  let buyer = new TextEncoder().encode(senderAddress);\n  let appArgs = [buyArg, buyer];\n\n  // Create ApplicationCallTxn\n  let appCallTxn = algosdk.makeApplicationCallTxnFromObject({\n    from: senderAddress,\n    appIndex: product.appId,\n    onComplete: algosdk.OnApplicationComplete.NoOpOC,\n    suggestedParams: params,\n    appArgs: appArgs,\n  });\n\n  // Create PaymentTxn\n  let paymentTxn = algosdk.makePaymentTxnWithSuggestedParamsFromObject({\n    from: senderAddress,\n    to: product.owner,\n    amount: product.price,\n    suggestedParams: params,\n  });\n\n  let txnArray = [appCallTxn, paymentTxn];\n\n  // Create group transaction out of previously build transactions\n  let groupID = algosdk.computeGroupID(txnArray);\n  for (let i = 0; i < 2; i++) txnArray[i].group = groupID;\n\n  // Sign & submit the group transaction\n  let signedTxn = await myAlgoConnect.signTransaction(\n    txnArray.map((txn) => txn.toByte())\n  );\n  console.log(\"Signed group transaction\");\n  let tx = await algodClient\n    .sendRawTransaction(signedTxn.map((txn) => txn.blob))\n    .do();\n\n  // Wait for group transaction to be confirmed\n  let confirmedTxn = await algosdk.waitForConfirmation(algodClient, tx.txId, 4);\n\n  // Notify about completion\n  console.log(\n    \"Group transaction \" +\n      tx.txId +\n      \" confirmed in round \" +\n      confirmedTxn[\"confirmed-round\"]\n  );\n};\n\n// RATE PRODUCT: Group transaction consisting of ApplicationCallTxn and PaymentTxn\nexport const ratePropertyAction = async (senderAddress, product, rate) => {\n  console.log(\"Rate property...\");\n\n  let params = await algodClient.getTransactionParams().do();\n\n  // Build required app args as Uint8Array\n  let rateArg = new TextEncoder().encode(\"rate\");\n  let ratesArg = algosdk.encodeUint64(rate);\n\n  let appArgs = [rateArg, ratesArg];\n\n  // Create ApplicationCallTxn\n  let appCallTxn = algosdk.makeApplicationCallTxnFromObject({\n    from: senderAddress,\n    appIndex: product.appId,\n    onComplete: algosdk.OnApplicationComplete.NoOpOC,\n    suggestedParams: params,\n    appArgs: appArgs,\n  });\n\n  let txnArray = [appCallTxn];\n\n  // Create group transaction out of previously build transactions\n  let groupID = algosdk.computeGroupID(txnArray);\n  for (let i = 0; i < 1; i++) txnArray[i].group = groupID;\n\n  // Sign & submit the group transaction\n  let signedTxn = await myAlgoConnect.signTransaction(\n    txnArray.map((txn) => txn.toByte())\n  );\n  console.log(\"Signed group transaction\");\n  let tx = await algodClient\n    .sendRawTransaction(signedTxn.map((txn) => txn.blob))\n    .do();\n\n  // Wait for group transaction to be confirmed\n  let confirmedTxn = await algosdk.waitForConfirmation(algodClient, tx.txId, 4);\n\n  // Notify about completion\n  console.log(\n    \"Group transaction \" +\n      tx.txId +\n      \" confirmed in round \" +\n      confirmedTxn[\"confirmed-round\"]\n  );\n};\n\n// DELETE PRODUCT: ApplicationDeleteTxn\nexport const deletePropertyAction = async (senderAddress, index) => {\n  console.log(\"Deleting application...\");\n\n  let params = await algodClient.getTransactionParams().do();\n\n  // Create ApplicationDeleteTxn\n  let txn = algosdk.makeApplicationDeleteTxnFromObject({\n    from: senderAddress,\n    suggestedParams: params,\n    appIndex: index,\n  });\n\n  // Get transaction ID\n  let txId = txn.txID().toString();\n\n  // Sign & submit the transaction\n  let signedTxn = await myAlgoConnect.signTransaction(txn.toByte());\n  console.log(\"Signed transaction with txID: %s\", txId);\n  await algodClient.sendRawTransaction(signedTxn.blob).do();\n\n  // Wait for transaction to be confirmed\n  const confirmedTxn = await algosdk.waitForConfirmation(algodClient, txId, 4);\n\n  // Get the completed Transaction\n  console.log(\n    \"Transaction \" +\n      txId +\n      \" confirmed in round \" +\n      confirmedTxn[\"confirmed-round\"]\n  );\n\n  // Get application id of deleted application and notify about completion\n  let transactionResponse = await algodClient\n    .pendingTransactionInformation(txId)\n    .do();\n  let appId = transactionResponse[\"txn\"][\"txn\"].apid;\n  console.log(\"Deleted app-id: \", appId);\n};\n\n// GET PROPERTIES: Use indexer\nexport const getPropertiesAction = async () => {\n  console.log(\"Fetching properties...\");\n  let note = new TextEncoder().encode(propertyDappNote);\n  let encodedNote = Buffer.from(note).toString(\"base64\");\n\n  // Step 1: Get all transactions by notePrefix (+ minRound filter for performance)\n  let transactionInfo = await indexerClient\n    .searchForTransactions()\n    .notePrefix(encodedNote)\n    .txType(\"appl\")\n    .minRound(minRound)\n    .do();\n  let properties = [];\n  for (const transaction of transactionInfo.transactions) {\n    let appId = transaction[\"created-application-index\"];\n    if (appId) {\n      // Step 2: Get each application by application id\n      let property = await getApplication(appId);\n      if (property) {\n        properties.push(property);\n      }\n    }\n  }\n  console.log(\"Properties fetched.\");\n  return properties;\n};\n\nconst getApplication = async (appId) => {\n  try {\n    // 1. Get application by appId\n    let response = await indexerClient\n      .lookupApplications(appId)\n      .includeAll(true)\n      .do();\n    if (response.application.deleted) {\n      return null;\n    }\n    let globalState = response.application.params[\"global-state\"];\n\n    // 2. Parse fields of response and return product\n    let owner = response.application.params.creator;\n    let title = \"\";\n    let image = \"\";\n    let location = \"\";\n    let buyer = \"\";\n    let price = 0;\n    let rate = 0;\n    let bought = 0;\n\n    const getField = (fieldName, globalState) => {\n      return globalState.find((state) => {\n        return state.key === utf8ToBase64String(fieldName);\n      });\n    };\n\n    if (getField(\"TITLE\", globalState) !== undefined) {\n      let field = getField(\"TITLE\", globalState).value.bytes;\n      title = base64ToUTF8String(field);\n    }\n\n    if (getField(\"IMAGE\", globalState) !== undefined) {\n      let field = getField(\"IMAGE\", globalState).value.bytes;\n      image = base64ToUTF8String(field);\n    }\n\n    if (getField(\"LOCATION\", globalState) !== undefined) {\n      let field = getField(\"LOCATION\", globalState).value.bytes;\n      location = base64ToUTF8String(field);\n    }\n\n    if (getField(\"PRICE\", globalState) !== undefined) {\n      price = getField(\"PRICE\", globalState).value.uint;\n    }\n\n    if (getField(\"BOUGHT\", globalState) !== undefined) {\n      bought = getField(\"BOUGHT\", globalState).value.uint;\n    }\n\n    if (getField(\"RATE\", globalState) !== undefined) {\n      rate = getField(\"RATE\", globalState).value.uint;\n    }\n\n    if (getField(\"BUYER\", globalState) !== undefined) {\n      let field = getField(\"BUYER\", globalState).value.bytes;\n      buyer = base64ToUTF8String(field);\n    }\n\n    return new Property(\n      title,\n      image,\n      location,\n      price,\n      bought,\n      rate,\n      buyer,\n      appId,\n      owner\n    );\n  } catch (err) {\n    return null;\n  }\n};\n","import algosdk from \"algosdk\";\nimport MyAlgoConnect from \"@randlabs/myalgo-connect\";\n\nconst config = {\n    algodToken: \"\",\n    algodServer: \"https://node.testnet.algoexplorerapi.io\",\n    algodPort: \"\",\n    indexerToken: \"\",\n    indexerServer: \"https://algoindexer.testnet.algoexplorerapi.io\",\n    indexerPort: \"\",\n}\n\nexport const algodClient = new algosdk.Algodv2(config.algodToken, config.algodServer, config.algodPort)\n\nexport const indexerClient = new algosdk.Indexer(config.indexerToken, config.indexerServer, config.indexerPort);\n\nexport const myAlgoConnect = new MyAlgoConnect();\n\nexport const minRound = 21540981;\n\n// https://github.com/algorandfoundation/ARCs/blob/main/ARCs/arc-0002.md\nexport const propertyDappNote = \"property-dapp:uv2\"\n\n// Maximum local storage allocation, immutable\nexport const numLocalInts = 0;\nexport const numLocalBytes = 0;\n// Maximum global storage allocation, immutable\nexport const numGlobalInts = 3; // Global variables stored as Int: count, sold\nexport const numGlobalBytes = 5; // Global variables stored as Bytes: name, description, image\n\nexport const ALGORAND_DECIMALS = 6;"],"sourceRoot":""}